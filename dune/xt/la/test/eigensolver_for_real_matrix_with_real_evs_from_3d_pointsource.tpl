// This file is part of the dune-xt-la project:
//   https://github.com/dune-community/dune-xt-la
// Copyright 2009-2017 dune-xt-la developers and contributors. All rights reserved.
// License: Dual licensed as BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)
//      or  GPL-2.0+ (http://opensource.org/licenses/gpl-license)
//          with "runtime exception" (http://www.dune-project.org/license.html)
// Authors:
//   Felix Schindler (2013 - 2017)
//   Rene Milk       (2014 - 2016)
//   Tobias Leibner  (2014 - 2015, 2017)

#include <dune/xt/common/test/main.hxx> // <- has to come first (includes the config.h)!

#include <dune/xt/la/test/eigensolver.hh>

{% for T_NAME, TESTMATRIXTYPE, TESTFIELDTYPE, TESTCOMPLEXMATRIXTYPE, TESTREALMATRIXTYPE in config.testtypes %}
struct EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}
: public EigenSolverTestForMatricesWithRealEigenvaluesAndVectors<{{TESTMATRIXTYPE}},
        {{TESTFIELDTYPE}},
        {{TESTCOMPLEXMATRIXTYPE}},
        {{TESTREALMATRIXTYPE}}>
{
  using BaseType = EigenSolverTestForMatricesWithRealEigenvaluesAndVectors;
  using typename BaseType::MatrixType;
  using typename BaseType::ComplexMatrixType;
  using typename BaseType::RealMatrixType;
  using typename BaseType::EigenValuesType;
  using typename BaseType::RealEigenValuesType;

  /**
     The matrix below is a real non-symmetric matrix with real eigenvalues from a moment model for the kinetic
     Pointsource test case.

     Lapack (this will be our reference below) gives the following eigenvalues
       "[-0.8444864106413339 -0.16463824774430641 -0.52355966495856965 -0.3749646631039919 -0.84448641064133234 -0.16463824774430624 -0.52355966495857964"
       " -0.37496466310399212 -0.84448641064133412 -0.16463824774430214 -0.52355966495855999 -0.3749646631039919 -0.8444864106413339 -0.16463824774430641"
       " -0.52355966495856965 -0.3749646631039919 0.84448641064133279 0.16463824774430375 0.52355966495857331 0.37496466310399207 0.84448641064133512"
       " 0.16463824774430211 0.5235596649585601 0.37496466310399174 0.84448641064133367 0.16463824774430696 0.52355966495857875 0.37496466310399201"
       " 0.84448641064133279 0.16463824774430375 0.52355966495857331 0.37496466310399207]");
     and the following eigenvectors
       "[0.72851570713827452 -0.75150769244905291 -0.70404766916105233 2.3603637290901763e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0.21303430399934711 -0.45821820130732605 -0.42921022728015484 -0.70710678118540637 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " -0.21303430399900891 0.45821820130670016 0.42921022728032016 -0.70710678118768866 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " -0.61522161461703495 0.1237269096511793 0.36861096178082275 -8.8499747932994974e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0.72851570713827474 0.75150769244905291 -0.70404766916105321 -2.3698156325820086e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 -0.21303430399900955 -0.45821820130670016 0.42921022728031616 0.70710678118769443 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 -0.21303430399934783 -0.45821820130732616 0.42921022728015107 -0.70710678118540071 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 -0.61522161461703428 -0.12372690965117891 0.36861096178083003 8.8862487586530301e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0.72851570713827507 -0.75150769244905435 0.70404766916105277 -2.3649038194164953e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0.21303430399900977 -0.45821820130669944 0.42921022728032243 -0.70710678118769144 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0.21303430399934783 -0.45821820130732493 0.42921022728015823 0.7071067811854036 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 -0.61522161461703384 0.1237269096511758 -0.36861096178081504 8.8683863064769226e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0.72851570713827452 0.75150769244905291 0.70404766916105233 2.3603637290901763e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399934711 -0.45821820130732605 -0.42921022728015484 0.70710678118540637 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399900891 0.45821820130670016 0.42921022728032016 0.70710678118768866 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703495 -0.1237269096511793 -0.36861096178082275 -8.8499747932994974e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827452 0.75150769244905347 -0.70404766916105233 2.366771891906538e-12 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399900972 0.45821820130670071 -0.4292102272803171 0.70710678118769266 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399934914 -0.45821820130732488 0.42921022728015545 0.70710678118540227 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703395 0.12372690965117754 -0.36861096178082531 8.875113362439653e-13 0 0 0 0 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827463 -0.75150769244905402 -0.7040476691610521 -2.363623581019006e-12 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399934772 0.45821820130732566 0.42921022728015851 -0.70710678118540471 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399900958 0.4582182013066996 0.42921022728032365 0.70710678118769033 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.6152216146170344 -0.12372690965117575 -0.36861096178081476 -8.8641409763951754e-13 0 0 0 0 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827496 0.75150769244905291 0.70404766916105321 -2.3669577533262699e-12 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399934656 0.45821820130732605 0.42921022728015146 0.70710678118540204 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399900863 0.45821820130669999 0.42921022728031671 -0.70710678118769288 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703473 0.12372690965117926 0.36861096178082908 -8.873867386792893e-13 0 0 0 0;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827452 -0.75150769244905347 0.70404766916105233 2.366771891906538e-12;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399900972 0.45821820130670071 -0.4292102272803171 -0.70710678118769266;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399934914 -0.45821820130732488 0.42921022728015545 -0.70710678118540227;"
       " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703395 -0.12372690965117754 0.36861096178082531 8.875113362439653e-13]");
   */
  EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}()
  {
    matrix_ = XT::Common::from_string<MatrixType>(
                "[0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; "
                " 0.51504129952366706 -0.60982094472103221 0.23485628161723826 0.60982094472140902 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                " -0.51504129952367239 0.23485628161724106 -0.60982094472143089 -0.60982094472101822 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0.33333333333361681 -0.34400354850297671 0.34400354850337111 -0.68800709700573948 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 -0.51504129952367905 -0.60982094472143522 -0.23485628161724537 -0.60982094472102288 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 -0.51504129952367383 -0.23485628161724259 -0.60982094472103665 -0.60982094472141379 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0.33333333333361703 0.34400354850337106 0.34400354850297671 -0.68800709700573892 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0.5150412995236624 -0.60982094472142445 -0.23485628161723462 0.60982094472101112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0.5150412995236574 -0.2348562816172321 -0.6098209447210261 0.60982094472140225 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0.33333333333362036 -0.34400354850337345 -0.34400354850297915 -0.68800709700573737 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 -0.51504129952366706 -0.60982094472103221 0.23485628161723826 -0.60982094472140902 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0.51504129952367239 0.23485628161724106 -0.60982094472143089 0.60982094472101822 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0.33333333333361681 0.34400354850297671 -0.34400354850337111 -0.68800709700573948 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.51504129952367217 0.60982094472143078 -0.23485628161724084 0.609820944721018 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.51504129952366695 -0.23485628161723821 0.60982094472103221 -0.60982094472140902 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.33333333333361748 -0.34400354850337145 0.34400354850297715 0.68800709700573914 0 0 0 0 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.51504129952365685 0.60982094472102577 0.23485628161723179 -0.6098209447214018 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.51504129952366218 0.23485628161723454 0.60982094472142434 -0.609820944721011 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.33333333333361953 0.34400354850297848 0.34400354850337289 0.68800709700573792 0 0 0 0 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.51504129952367428 0.60982094472103698 0.23485628161724292 0.60982094472141413 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.51504129952367939 0.23485628161724564 0.60982094472143544 0.60982094472102311 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3333333333336162 -0.3440035485029761 -0.34400354850337045 0.68800709700573959 0 0 0 0;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.51504129952367217 0.60982094472143078 -0.23485628161724084 -0.609820944721018;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.51504129952366695 -0.23485628161723821 0.60982094472103221 0.60982094472140902;"
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.33333333333361748 0.34400354850337145 -0.34400354850297715 0.68800709700573914]");
    expected_real_eigenvalues_ = XT::Common::from_string<RealEigenValuesType>(
               "[-0.8444864106413339 -0.16463824774430641 -0.52355966495856965 -0.3749646631039919 -0.84448641064133234 -0.16463824774430624 -0.52355966495857964 "
                "-0.37496466310399212 -0.84448641064133412 -0.16463824774430214 -0.52355966495855999 -0.3749646631039919 -0.8444864106413339 -0.16463824774430641 "
                "-0.52355966495856965 -0.3749646631039919 0.84448641064133279 0.16463824774430375 0.52355966495857331 0.37496466310399207 0.84448641064133512 "
                "0.16463824774430211 0.5235596649585601 0.37496466310399174 0.84448641064133367 0.16463824774430696 0.52355966495857875 0.37496466310399201 "
                "0.84448641064133279 0.16463824774430375 0.52355966495857331 0.37496466310399207]");
    expected_real_eigenvectors_ = XT::Common::from_string<RealMatrixType>(
               "[0.72851570713827452 -0.75150769244905291 -0.70404766916105233 2.3603637290901763e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0.21303430399934711 -0.45821820130732605 -0.42921022728015484 -0.70710678118540637 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " -0.21303430399900891 0.45821820130670016 0.42921022728032016 -0.70710678118768866 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " -0.61522161461703495 0.1237269096511793 0.36861096178082275 -8.8499747932994974e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0.72851570713827474 0.75150769244905291 -0.70404766916105321 -2.3698156325820086e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 -0.21303430399900955 -0.45821820130670016 0.42921022728031616 0.70710678118769443 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 -0.21303430399934783 -0.45821820130732616 0.42921022728015107 -0.70710678118540071 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 -0.61522161461703428 -0.12372690965117891 0.36861096178083003 8.8862487586530301e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0.72851570713827507 -0.75150769244905435 0.70404766916105277 -2.3649038194164953e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0.21303430399900977 -0.45821820130669944 0.42921022728032243 -0.70710678118769144 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0.21303430399934783 -0.45821820130732493 0.42921022728015823 0.7071067811854036 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 -0.61522161461703384 0.1237269096511758 -0.36861096178081504 8.8683863064769226e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0.72851570713827452 0.75150769244905291 0.70404766916105233 2.3603637290901763e-12 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399934711 -0.45821820130732605 -0.42921022728015484 0.70710678118540637 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399900891 0.45821820130670016 0.42921022728032016 0.70710678118768866 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703495 -0.1237269096511793 -0.36861096178082275 -8.8499747932994974e-13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827452 0.75150769244905347 -0.70404766916105233 2.366771891906538e-12 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399900972 0.45821820130670071 -0.4292102272803171 0.70710678118769266 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399934914 -0.45821820130732488 0.42921022728015545 0.70710678118540227 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703395 0.12372690965117754 -0.36861096178082531 8.875113362439653e-13 0 0 0 0 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827463 -0.75150769244905402 -0.7040476691610521 -2.363623581019006e-12 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399934772 0.45821820130732566 0.42921022728015851 -0.70710678118540471 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399900958 0.4582182013066996 0.42921022728032365 0.70710678118769033 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.6152216146170344 -0.12372690965117575 -0.36861096178081476 -8.8641409763951754e-13 0 0 0 0 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827496 0.75150769244905291 0.70404766916105321 -2.3669577533262699e-12 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399934656 0.45821820130732605 0.42921022728015146 0.70710678118540204 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399900863 0.45821820130669999 0.42921022728031671 -0.70710678118769288 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703473 0.12372690965117926 0.36861096178082908 -8.873867386792893e-13 0 0 0 0;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.72851570713827452 -0.75150769244905347 0.70404766916105233 2.366771891906538e-12;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.21303430399900972 0.45821820130670071 -0.4292102272803171 -0.70710678118769266;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.21303430399934914 -0.45821820130732488 0.42921022728015545 -0.70710678118540227;"
               " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -0.61522161461703395 -0.12372690965117754 0.36861096178082531 8.875113362439653e-13]");
    expected_eigenvalues_ = XT::Common::convert_to<EigenValuesType>(expected_real_eigenvalues_);
    expected_eigenvectors_ = XT::Common::convert_to<ComplexMatrixType>(expected_real_eigenvectors_);
    expected_max_ev_ = 0.84448641064133512;
    expected_min_ev_ = -0.84448641064133412;
    all_matrices_and_expected_eigenvalues_and_vectors_are_computed_ = true;
  }

  using BaseType::all_matrices_and_expected_eigenvalues_and_vectors_are_computed_;
  using BaseType::matrix_;
  using BaseType::expected_eigenvalues_;
  using BaseType::expected_eigenvectors_;
  using BaseType::expected_real_eigenvalues_;
  using BaseType::expected_max_ev_;
  using BaseType::expected_min_ev_;
  using BaseType::expected_real_eigenvectors_;
}; // struct EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}


TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, exports_correct_types)
{
  exports_correct_types();
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, has_types_and_options)
{
  has_types_and_options();
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, throws_on_broken_matrix_construction)
{
  throws_on_broken_matrix_construction();
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, allows_broken_matrix_construction_when_checks_disabled)
{
  allows_broken_matrix_construction_when_checks_disabled();
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, throws_on_inconsistent_given_options)
{
  throws_on_inconsistent_given_options();
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, is_constructible)
{
  is_constructible();
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_eigenvalues)
{
  gives_correct_eigenvalues({ {"eigen", "1e-13"}, {"shifted_qr", "1e-14"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_eigenvalues_in_correct_order)
{
  gives_correct_eigenvalues_in_correct_order({ {"eigen", /*we_expect_a_failure: */ "-1"}, {"shifted_qr", /*we_expect_a_failure: */ "-1"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_real_eigenvalues)
{
  gives_correct_real_eigenvalues({ {"eigen", "1e-13"}, {"shifted_qr", "1e-14"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_real_eigenvalues_in_correct_order)
{
  gives_correct_real_eigenvalues_in_correct_order({ {"eigen", /*we_expect_a_failure: */ "-1"}, {"shifted_qr", /*we_expect_a_failure: */ "-1"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_max_eigenvalue)
{
  gives_correct_max_eigenvalue({ {"shifted_qr", "1e-14"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_min_eigenvalue)
{
  gives_correct_min_eigenvalue({ {"shifted_qr", "1e-14"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_eigenvectors_in_correct_order)
{
  gives_correct_eigenvectors_in_correct_order({ {"eigen", /*we_expect_a_failure: */ "-1"}, {"shifted_qr", /*we_expect_a_failure: */ "-1"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_real_eigenvectors_in_correct_order)
{
  gives_correct_real_eigenvectors_in_correct_order({ {"eigen", /*we_expect_a_failure: */ "-1"}, {"shifted_qr", /*we_expect_a_failure: */ "-1"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_eigendecomposition)
{
  gives_correct_eigendecomposition({ {"lapack", "1e-14"}, {"eigen", "1e-12"}, {"numpy", "1e-14"}, {"shifted_qr", "1e-14"} });
}

TEST_F(EigenSolverForMatrixFrom3dPointsource_{{T_NAME}}, gives_correct_real_eigendecomposition)
{
  gives_correct_real_eigendecomposition(
      { {"lapack", "1e-14"}, {"eigen", "1e-12"}, {"numpy", "1e-14"}, {"shifted_qr", "1e-14"} });
}

{% endfor %}
